-- ============================================
-- ðŸ§¸âš¡ CREATE EMPLOYES SYNC TABLES
-- ============================================
-- Add the missing tables needed for Employes.nl sync
-- ============================================

-- First ensure we have the update_updated_at_column function
CREATE OR REPLACE FUNCTION public.update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ language 'plpgsql';

-- 1. Tokens table for OAuth2 authentication
CREATE TABLE IF NOT EXISTS public.employes_tokens (
  id bigint generated by default as identity primary key,
  access_token text not null,
  refresh_token text,
  expires_at timestamptz not null,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

-- Enable RLS
ALTER TABLE public.employes_tokens ENABLE ROW LEVEL SECURITY;

-- Create policies with proper admin checks
DROP POLICY IF EXISTS "Admin can manage employes tokens" ON public.employes_tokens;
CREATE POLICY "Admin can manage employes tokens"
ON public.employes_tokens
FOR ALL
USING (public.is_admin());

-- 2. Employee mapping table
CREATE TABLE IF NOT EXISTS public.employes_employee_map (
  id bigint generated by default as identity primary key,
  lms_staff_id uuid not null references staff(id) on delete cascade,
  employes_employee_id text not null,
  synced_at timestamptz default now(),
  unique(lms_staff_id, employes_employee_id)
);

-- Enable RLS
ALTER TABLE public.employes_employee_map ENABLE ROW LEVEL SECURITY;

-- Create secure policies
DROP POLICY IF EXISTS "Admin can view employee mappings" ON public.employes_employee_map;
DROP POLICY IF EXISTS "Admin can manage employee mappings" ON public.employes_employee_map;

CREATE POLICY "Admin can view employee mappings"
ON public.employes_employee_map
FOR SELECT
USING (public.is_admin());

CREATE POLICY "Admin can manage employee mappings"
ON public.employes_employee_map
FOR ALL
USING (public.is_admin());

-- 3. Sync logs table
CREATE TABLE IF NOT EXISTS public.employes_sync_logs (
  id bigint generated by default as identity primary key,
  action text not null,
  lms_staff_id uuid,
  employes_employee_id text,
  payload jsonb,
  status text not null,
  error_message text,
  message text,
  details jsonb,
  created_at timestamptz default now()
);

-- Enable RLS
ALTER TABLE public.employes_sync_logs ENABLE ROW LEVEL SECURITY;

-- Create secure policies
DROP POLICY IF EXISTS "Admin can view sync logs" ON public.employes_sync_logs;
DROP POLICY IF EXISTS "System can insert sync logs" ON public.employes_sync_logs;

CREATE POLICY "Admin can view sync logs"
ON public.employes_sync_logs
FOR SELECT
USING (public.is_admin());

CREATE POLICY "Admin can manage sync logs"
ON public.employes_sync_logs
FOR ALL
USING (public.is_admin());

-- 4. Wage component mapping table
CREATE TABLE IF NOT EXISTS public.employes_wage_map (
  id bigint generated by default as identity primary key,
  lms_contract_id uuid not null references contracts(id) on delete cascade,
  employes_wage_component_id text not null,
  component_type text not null,
  synced_at timestamptz default now(),
  unique(lms_contract_id, employes_wage_component_id)
);

-- Enable RLS
ALTER TABLE public.employes_wage_map ENABLE ROW LEVEL SECURITY;

-- Create secure policies
DROP POLICY IF EXISTS "Admin can view wage mappings" ON public.employes_wage_map;
DROP POLICY IF EXISTS "Admin can manage wage mappings" ON public.employes_wage_map;

CREATE POLICY "Admin can view wage mappings"
ON public.employes_wage_map
FOR SELECT
USING (public.is_admin());

CREATE POLICY "Admin can manage wage mappings"
ON public.employes_wage_map
FOR ALL
USING (public.is_admin());

-- 5. Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_employes_employee_map_lms_staff_id ON public.employes_employee_map (lms_staff_id);
CREATE INDEX IF NOT EXISTS idx_employes_employee_map_employes_id ON public.employes_employee_map (employes_employee_id);
CREATE INDEX IF NOT EXISTS idx_employes_sync_logs_status ON public.employes_sync_logs (status);
CREATE INDEX IF NOT EXISTS idx_employes_sync_logs_action ON public.employes_sync_logs (action);
CREATE INDEX IF NOT EXISTS idx_employes_sync_logs_created_at ON public.employes_sync_logs (created_at DESC);

-- 6. Create trigger for updated_at on tokens table
DROP TRIGGER IF EXISTS update_employes_tokens_updated_at ON public.employes_tokens;
CREATE TRIGGER update_employes_tokens_updated_at
  BEFORE UPDATE ON public.employes_tokens
  FOR EACH ROW
  EXECUTE FUNCTION public.update_updated_at_column();

-- Success message
DO $$ BEGIN
  RAISE NOTICE 'ðŸ§¸âš¡ EMPLOYES SYNC TABLES CREATED!';
  RAISE NOTICE 'âœ… employes_tokens, employes_employee_map, employes_sync_logs, employes_wage_map';
  RAISE NOTICE 'ðŸ”’ All tables secured with admin-only access';
  RAISE NOTICE 'ðŸš€ Ready for Employes.nl integration!';
END $$;